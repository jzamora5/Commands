npx license mit > LICENSE && npx gitignore node && git init && npm init -y

npm i graphql

npm i express express-graphql

npm i graphql-tools


âž• Query in Graphql

You can select the fields you want even if there are more

in this case _id and title were selected

{
	getCourses{
		_id
		title
  }
}


âž• Query an specific resource

{
	getCourse(id: "1") {
    _id
		title
    description
	}
}

âž• Mutate Data (Insert)

mutation {
  createCourse(input: {
      title: "Curso de ejemplo 4"
      description: "Descripcion 4"
      topic: "diseÃ±o"
  }){
    _id
    title
    description
  }
}


mutation {
  createStudent(input: {
      name: "Estudiante 2"
    	email: "estudiante2@gmail.com"
  }){
    _id
    name
    email
  }
}


âž• Mutate Data (Edit)

mutation {
	editCourse(_id: "60ca23824cbf7308911c4b21", input: {
			title: "Mi Titulo 4"
  }) {
		_id
		title
	}
}

âž• query for Nested Type with implemented resolver 

{
	getCourses {
		_id
    title
    people {
		  _id
		  name
		  email
	  }
	}
}


ðŸ”¹ðŸ”¹ðŸ”¹ðŸ”¹ Alias

{
	AllCourses: getCourses {
		_id
    title
	}

  Course1: getCourse(id: "60ca1b690c131360e5d08547") {
      _id
      title
      description
  }
  
  Course2: getCourse(id: "60ca1b690c131360e5d08548") {
      title
      description
      topic
  }
}


ðŸ”¹ðŸ”¹ðŸ”¹ðŸ”¹ Fragment

{
	AllCourses: getCourses {
		...CourseFields
	}

  Course1: getCourse(id: "60ca1b690c131360e5d08547") {
    ...CourseFields
    teacher
  }
  
  Course2: getCourse(id: "60ca1b690c131360e5d08548") {
      ...CourseFields
      topic
  }
}

fragment CourseFields on Course {

	_id
  title
	description
}

â¬› â¬›  With nested fields


{
	AllCourses: getCourses {
		...CourseFields
	}

  Course1: getCourse(id: "60ca1b690c131360e5d08547") {
    ...CourseFields
    teacher
    people {
			email		
		}
  }
  
  Course2: getCourse(id: "60ca1b690c131360e5d08548") {
      ...CourseFields
      topic
  }
}

fragment CourseFields on Course {
	_id
  title
	description
  people {
		_id
    name
	}
}



ðŸ”¹ðŸ”¹ðŸ”¹ðŸ”¹ Variables


mutation AddPersonToCourse2 ($course: ID!, $person:ID!) {
	addPeople(courseID: $course, personID: $person) {
			_id
			title
	}
	
}


â¬› â¬› In Query Variables AS JSON (Needs commas)

{
	"course": "60ca1b690c131360e5d08548",
  "person": "60ca2b60a51e270abca10381"
}



=======================

query GetCourse2($course: ID!){
  
  getCourse(id: $course) {
		_id
    title
	}
}

Query Variables

{
	"course": "60ca1b690c131360e5d08548"
}



ðŸ”¹ðŸ”¹ðŸ”¹ðŸ”¹ Query asking if any type Monitor implemented with Interface

{
	getPeople{
		_id
    name
    email
    ... on Monitor {
			phone
		}
	}
}

==============

{
	getPeople{
		_id
    name
    email
    ... on Monitor {
			phone
		}
	... on Student {
	
  	avatar
  }
	}
}


ðŸ”¹ðŸ”¹ðŸ”¹ðŸ”¹ Directives


query getPeopleData($monitor: Boolean!, $avatar: Boolean!) {
	getPeople{
		_id
    name
    email
    ... on Monitor @include(if: $monitor) {
			phone
		}
    ... on Student @skip (if: $avatar) {
			avatar
      email
		}
	}
}


Query Variables

{
  "monitor": false,
  "avatar": false
}